{"version":3,"sources":["math/manhattanDistance.js","components/Floor.js","math/floorPrediction.js","components/InputArea.js","helper/converter.js","App.js","reportWebVitals.js","index.js"],"names":["getPossibleCombinations","vectors","resulting","console","log","length","vector","r","getCoordinatesAtDistance","filter","e","find","l","result","z","y","x","currentVector","Math","abs","push","Floor","value","combinations","subHeader","fp","mode","TopFloor","maxCount","forEach","cs","currentFloor","prob","floor","prediction","floorPrediction","lines","line","Paragraph","Pane","Heading","is","InputArea","setResult","React","useState","setValue","Card","elevation","height","majorScale","width","display","TextareaField","label","description","placeholder","onChange","target","Button","marginRight","onClick","values","coordsString","split","coordsArr","convertToArray","getResult","App","coordinates","setCoordinates","input","size","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.649611cb.chunk.js","sourcesContent":["export const getPossibleCombinations = (vectors) => {\r\n    let resulting = [];\r\n    console.log('possible combinations ', vectors);\r\n    if (!vectors || !vectors.length) return resulting;\r\n    for (let vector of vectors) {\r\n        if (vector.length != 4) continue;\r\n        let r = getCoordinatesAtDistance(vector);\r\n        if (!resulting.length) {\r\n            resulting = r;\r\n        } else {\r\n            resulting = resulting.filter(e => r.find(l => l[0] == e[0] && l[1] == e[1] && l[2] == e[2]));\r\n        }\r\n    }\r\n    console.log('result ', resulting);\r\n    return resulting;\r\n}\r\n\r\nconst getCoordinatesAtDistance = (vector) => {\r\n    let result = [];\r\n    if (!vector || vector.length == 0) return result;\r\n    for (let z = 0; z < 100; z++) {\r\n        for (let y = 0; y < 100; y++) {\r\n            for (let x = 0; x < 100; x++) {\r\n                let currentVector = [z, y, x];\r\n                let sum = Math.abs(vector[2] - x) + Math.abs(vector[1] - y) + Math.abs(vector[0] - z);\r\n                if (sum == vector[3]) {\r\n                    result.push(currentVector)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nconst intersect = (a, b) => {\r\n    var setB = new Set(b);\r\n    return [...new Set(a)].filter(x => setB.has(x));\r\n}\r\n\r\n// let x=[{z:29,y:64,x:61,dist:57},\r\n//     {z:58,y:81,x:66,dist:18},\r\n//     {z:39,y:65,x:66,dist:41},\r\n//     {z:9,y:83,x:50,dist:69},\r\n//     {z:0,y:50,x:50,dist:111}]\r\n\r\nlet x = [[29, 64, 61, 57],\r\n    [58, 81, 66, 18],\r\n    [39, 65, 66, 41],\r\n    [9, 83, 50, 69],\r\n    [0, 50, 50, 111]]\r\n//let x=[[0,50,50,1],[0,51,50,0]]\r\n\r\nconsole.log(getPossibleCombinations(x));","import React, {Component} from \"react\";\r\nimport {getPossibleCombinations} from \"../math/manhattanDistance\";\r\nimport {Heading, Pane, Paragraph} from \"evergreen-ui\";\r\nimport {floorPrediction} from \"../math/floorPrediction\";\r\n\r\n\r\nexport const Floor = (value) => {\r\n    console.log(value);\r\n    let combinations = getPossibleCombinations(value.value);\r\n    let subHeader = 'There are no floors to display';\r\n    let fp = floorPrediction(combinations);\r\n    console.log(\"statistics\", fp.prediction);\r\n    if (fp.prediction == 1) {\r\n        subHeader = `It is definitely on floor ${fp.floor} !!!`;\r\n    } else if (fp.prediction >= 0.79) {\r\n        subHeader = `Almost sure it is on floor ${fp.floor} .`;\r\n    } else if (fp.prediction >= 0.51) {\r\n        subHeader = `It might be on floor ${fp.floor} ...`;\r\n    } else {\r\n        subHeader = 'Try and input more combinations to get a better result';\r\n    }\r\n    let lines = [];\r\n    const lineComponent = (line) => {\r\n        return <Paragraph>Floor:{line[0]} Y:{line[1]} X:{line[2]}</Paragraph>\r\n    };\r\n    combinations.forEach(e => lines.push(lineComponent(e)));\r\n    return (\r\n        <Pane>\r\n            <Heading is=\"h3\">\r\n                {subHeader}\r\n            </Heading>\r\n            {lines}\r\n        </Pane>\r\n    )\r\n}","export const floorPrediction = (combinations) => {\r\n    if (!combinations.length) return 0;\r\n    var mode = {}\r\n    var TopFloor = combinations[0][0];\r\n    var maxCount = 1;\r\n\r\n    combinations.forEach(cs => {\r\n        let currentFloor = cs[0];\r\n        mode[currentFloor] = (mode[currentFloor] == null) ? 1 : mode[currentFloor] += 1;\r\n\r\n        if (mode[currentFloor] > maxCount) {\r\n            TopFloor = currentFloor;\r\n            maxCount = mode[currentFloor];\r\n        }\r\n    })\r\n\r\n    let prob = maxCount / combinations.length;\r\n    return {floor: TopFloor, prediction: prob}\r\n}\r\n","import {Button, Card, majorScale, TextareaField} from \"evergreen-ui\";\r\nimport React from \"react\";\r\nimport {convertToArray} from \"../helper/converter\";\r\n\r\nexport const InputArea = ({setResult}) =>{\r\n    const [value, setValue] = React.useState('')\r\n    const getResult = (value) => {\r\n        let values = convertToArray(value);\r\n        setResult(values);\r\n    }\r\n    let desc = \"floor y x distance\" + \"\\r\\n\" + \"0 50 50 78\" + \"\\r\\n\" + \"10 21 76 110\";\r\n\r\n    return(\r\n        <Card\r\n            elevation={0}\r\n            height={majorScale(50)}\r\n            width={majorScale(50)}\r\n            display={\"inline-block\"}>\r\n            <TextareaField\r\n                width={majorScale(30)}\r\n                label=\"Enter coordinates as seen in game; floor y x distance.\"\r\n                description=\"The more coordinates added the more accurate will be the location.\"\r\n                placeholder={desc}\r\n                value={value}\r\n                onChange={(e) => setValue(e.target.value)}\r\n            />\r\n            <Button marginRight={16} onClick={() => getResult(value)}>Calculate</Button>\r\n        </Card>\r\n    )\r\n}","\r\nexport const convertToArray= (value) =>{\r\n    let coordsString = value.split('\\n');\r\n    let coordsArr =[];\r\n    coordsString.forEach(cs => coordsArr.push(cs.split(' ')));\r\n    return coordsArr;\r\n}","import './App.css';\nimport React from 'react';\nimport {Card, Pane, Button, TextareaField, majorScale, Heading} from 'evergreen-ui';\nimport {Floor} from '../src/components/Floor';\nimport {InputArea} from \"./components/InputArea\";\n\nfunction App() {\n    const [value, setValue] = React.useState('')\n    const [coordinates, setCoordinates] = React.useState([])\n\n    const getResult = (input) => {\n        if (input) {\n            setCoordinates(input);\n        }\n    }\n    return (\n        <Pane display={\"flex\"}>\n            <InputArea setResult={getResult} />\n            <Card elevation={0}>\n                <Heading> Possible Floors and Coordinates</Heading>\n                <Heading is=\"h3\" size={200}>Currently there is no mapping correlation with the actual game floors so some coordinates might lead to nowhere</Heading>\n                <Floor value={coordinates}/>\n            </Card>\n        </Pane>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// <button onclick={calculateFloor}> Calculate floor</button>\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}